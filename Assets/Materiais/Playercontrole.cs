//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Materiais/Playercontrole.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playercontrole: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playercontrole()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Playercontrole"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""cdd2ef8c-ec46-420e-a1c7-e901d09c7e52"",
            ""actions"": [
                {
                    ""name"": ""Direita"",
                    ""type"": ""Button"",
                    ""id"": ""91c3a26e-e8e2-4caf-931e-c32eba132338"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esquerda"",
                    ""type"": ""Button"",
                    ""id"": ""21953cca-672f-492e-be4e-2187bf1aa247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cima"",
                    ""type"": ""Button"",
                    ""id"": ""8d8ca6ed-d132-445d-a120-5494b826c2ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Baixo"",
                    ""type"": ""Button"",
                    ""id"": ""14454a52-7e51-4dd2-8f8d-f6b9c28467f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Polinizar"",
                    ""type"": ""Button"",
                    ""id"": ""fe3675f4-2103-499c-bc16-5a11358d3298"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""815390af-2e00-430b-ab06-78791fcf770a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direita"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ded1f28-d83b-4394-865c-a6fdaa2cee4a"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cima"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e3c2431-dbfb-403b-971c-e040c20efe29"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Baixo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5fe7faa-8966-4f5c-93e4-a435bc144ef9"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esquerda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afd49222-9f6a-4511-a55e-c17bfbcfcfdc"",
                    ""path"": ""<SwitchProControllerHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Polinizar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Direita = m_Gameplay.FindAction("Direita", throwIfNotFound: true);
        m_Gameplay_Esquerda = m_Gameplay.FindAction("Esquerda", throwIfNotFound: true);
        m_Gameplay_Cima = m_Gameplay.FindAction("Cima", throwIfNotFound: true);
        m_Gameplay_Baixo = m_Gameplay.FindAction("Baixo", throwIfNotFound: true);
        m_Gameplay_Polinizar = m_Gameplay.FindAction("Polinizar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Direita;
    private readonly InputAction m_Gameplay_Esquerda;
    private readonly InputAction m_Gameplay_Cima;
    private readonly InputAction m_Gameplay_Baixo;
    private readonly InputAction m_Gameplay_Polinizar;
    public struct GameplayActions
    {
        private @Playercontrole m_Wrapper;
        public GameplayActions(@Playercontrole wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direita => m_Wrapper.m_Gameplay_Direita;
        public InputAction @Esquerda => m_Wrapper.m_Gameplay_Esquerda;
        public InputAction @Cima => m_Wrapper.m_Gameplay_Cima;
        public InputAction @Baixo => m_Wrapper.m_Gameplay_Baixo;
        public InputAction @Polinizar => m_Wrapper.m_Gameplay_Polinizar;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Direita.started += instance.OnDireita;
            @Direita.performed += instance.OnDireita;
            @Direita.canceled += instance.OnDireita;
            @Esquerda.started += instance.OnEsquerda;
            @Esquerda.performed += instance.OnEsquerda;
            @Esquerda.canceled += instance.OnEsquerda;
            @Cima.started += instance.OnCima;
            @Cima.performed += instance.OnCima;
            @Cima.canceled += instance.OnCima;
            @Baixo.started += instance.OnBaixo;
            @Baixo.performed += instance.OnBaixo;
            @Baixo.canceled += instance.OnBaixo;
            @Polinizar.started += instance.OnPolinizar;
            @Polinizar.performed += instance.OnPolinizar;
            @Polinizar.canceled += instance.OnPolinizar;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Direita.started -= instance.OnDireita;
            @Direita.performed -= instance.OnDireita;
            @Direita.canceled -= instance.OnDireita;
            @Esquerda.started -= instance.OnEsquerda;
            @Esquerda.performed -= instance.OnEsquerda;
            @Esquerda.canceled -= instance.OnEsquerda;
            @Cima.started -= instance.OnCima;
            @Cima.performed -= instance.OnCima;
            @Cima.canceled -= instance.OnCima;
            @Baixo.started -= instance.OnBaixo;
            @Baixo.performed -= instance.OnBaixo;
            @Baixo.canceled -= instance.OnBaixo;
            @Polinizar.started -= instance.OnPolinizar;
            @Polinizar.performed -= instance.OnPolinizar;
            @Polinizar.canceled -= instance.OnPolinizar;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnDireita(InputAction.CallbackContext context);
        void OnEsquerda(InputAction.CallbackContext context);
        void OnCima(InputAction.CallbackContext context);
        void OnBaixo(InputAction.CallbackContext context);
        void OnPolinizar(InputAction.CallbackContext context);
    }
}
